import Head from "next/head";
import Link from "next/link";

import { GetStaticPaths, GetStaticPropsContext, type NextPage } from "next";

import { createServerSideHelpers } from "@trpc/react-query/server";

import superjson from "superjson";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

import Loading from "~/components/loading";
import dayjs from "dayjs";import relativeTime from "dayjs/plugin/relativeTime";dayjs.extend(relativeTime);

const Home: NextPage<{ id: string }> = ({ id }) => {
  const { data, isLoading } = api.post.getPostbyId.useQuery({
    id,
  });
  if (!data) return <div>fucking hard to get</div>;
  if (isLoading) return <Loading />;
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen justify-center ">
        <div
          className="w-full max-w-lg border-x-2 border-slate-300 text-xl text-white
        "
        >
          <div className="flex w-full flex-col">
            <div key={data.id} className="border-b border-slate-200 p-5">
              <div className="flex gap-2">
                <Link href={`${data.author.name} `} shallow>
                  <img
                    src={data.author.image as string}
                    alt="twitter user"
                    className=" h-10 w-10 rounded-full"
                  />
                </Link>
                <div className="flex flex-col">
                <span className="align-text-top text-xs opacity-50">
                      <Link href={`${data.author.name} `}>
                        {`@` + data.author.name?.split(" ").join("")}
                      </Link>
                      <span className="font-thin">{` Â· ${dayjs(
                        data.createdAt
                      ).fromNow()}`}</span>
                    </span>

                    <Link href={`/post/${data.id} `}>
                      <span>{data.content}</span>
                    </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    // https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#fallback-blocking
    fallback: "blocking",
  };
};
export async function getStaticProps(
  context: GetStaticPropsContext<{ id: string }>
) {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const id = context.params?.id as string;

  console.log(id, id);

  // prefetch `post.byId`
  await helpers.post.getPostbyId.prefetch({ id });
  return {
    props: {
      trpcState: helpers.dehydrate(),
      id,
    },
    revalidate: 1,
  };
}

import { GetStaticPaths, GetStaticPropsContext, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { createServerSideHelpers } from "@trpc/react-query/server";
import { GetServerSidePropsContext, InferGetServerSidePropsType } from "next";
import superjson from "superjson";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);

import Loading from "~/components/loading";
import NotExists from "~/components/NotExists";
const Page: NextPage<{ slug: string }> = ({ slug }) => {
  const user = api.profile.getUserbyId.useQuery({ slug });

  if (user.data == null) return <div>no user exixt</div>;
  const { data, isLoading } = api.profile.getPostsForUser.useQuery({
    user: user.data,
  });
  // if (!data) return <NotExists />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen justify-center ">
        <div
          className="relative w-full max-w-xl border-x-2 border-slate-300 text-xl text-white
        "
        >
          <div className="flex h-48 w-full border-b border-slate-200  bg-[url('https://pbs.twimg.com/profile_banners/1300661071015936001/1676564910/600x200')] "></div>

          <div className="absolute  inset-y-[9.75rem] flex select-none	">
            <img
              src={user.data?.image as string}
              alt="twitter user"
              className="ml-3 h-20 w-20 rounded-full border-4 border-black"
            />
          </div>
          <div className="h-12" />
          <div className="flex flex-col">
            <span className="ml-4 text-lg font-bold">{user.data?.name}</span>
            <span className="ml-4 text-xs opacity-50">
              {" "}
              {`@` + user.data?.name?.split(" ").join("")}
            </span>
          </div>

          <div className="border-b border-slate-800 px-4">
            <ul className="-mb-px flex flex-wrap text-center text-sm font-medium">
              <li className="mr-2" role="presentation">
                <span className="inline-block rounded-t-lg  p-4">Tweets</span>
              </li>
            </ul>
          </div>
          {!data ?? <NotExists />}
          {isLoading ? (
            <Loading />
          ) : (
            <div className="flex w-full flex-col">
              {[...data!]?.map((post) => (
                <div key={post.id} className="border-b border-slate-200 p-5">
                  <div className="flex gap-2">
                    <Link href={`${user.data?.name} `} shallow>
                      <img
                        src={user.data?.image as string}
                        alt="twitter user"
                        className=" h-10 w-10 rounded-full"
                      />
                    </Link>
                    <div className="flex flex-col">
                      <span className="align-text-top text-xs opacity-50">
                        <Link href={`${user.data?.name} `}>
                          {`@` + user.data?.name?.split(" ").join("")}
                        </Link>
                        <span className="font-thin">{` Â· ${dayjs(
                          post.createdAt
                        ).fromNow()}`}</span>
                      </span>
                      <Link href={`/post/${post.id} `}>
                      <span>{post.content}</span>
                    </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </main>
    </>
  );
};

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    // https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#fallback-blocking
    fallback: "blocking",
  };
};
export async function getStaticProps(
  context: GetStaticPropsContext<{ slug: string }>
) {
  const helpers = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, session: null },
    transformer: superjson, // optional - adds superjson serialization
  });

  const slug = context.params?.slug as string;

  console.log(slug, slug);

  // prefetch `post.byId`
  await helpers.profile.getUserbyId.prefetch({ slug });
  return {
    props: {
      trpcState: helpers.dehydrate(),
      slug,
    },
    revalidate: 1,
  };
}
export default Page;
